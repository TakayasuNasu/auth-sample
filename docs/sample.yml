openapi: 3.0.0
info:
  version: 1.0.0
  title: DPCOde Academy API
  description: |
    DPCOde Academy API <br>
    Basically for optional column, it returns a blank instead of null if there is no value.

servers:
  - url: https://localhost:8000

security:
  - BasicAuth: []

paths:
  /users:
    get:
      tags:
        - users
      description: Get all students data.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

              example:
                - user_id: 442c16a8a353
                  first_name: Brooklyn
                  last_name: Beckham
                  image_path: https://wikinetworth.com/uploads/images/brooklyn-beckham.jpg?ezimgfmt=rs:340x340/rscb2/ng:webp/ngcb2
                  birth: '1994-01-24 00:00:00.000'
                  email: student1@gmail.com
                  phone: 123-456-7890
                  parent_first_name: David
                  parent_last_name: Beckham
                  parent_email: parent1@gmail.com
                  parent_phone: 456-789-0123
                  orders: [
                      {
                        "id": "917c16-ea4c-72306594-9ef0",
                        "product_name": "private tutoring Starter",
                        "price": "100.00",
                        "created_date": "2021-06-25 13:14:36.036"
                      },
                      {
                        "id": "0594-5375f-054f4-7b5e1",
                        "product_name": "private tutoring Premium",
                        "price": "300.00",
                        "created_date": "2021-07-12 15:14:36.036"
                      },
                      {
                        "id": "8ff9-14390-04d99-b00b",
                        "product_name": "private tutoring Beginner",
                        "price": "200.00",
                        "created_date": "2021-11-14 22:26:01.077"
                      },
                  ]
                  type: student
                  created_date: '2021-05-20 22:00:40.464'
                  updated_date: '2021-05-22 10:00:40.838'
                - user_id: ffaaafecc0e9
                  first_name: student5
                  last_name: parent_email
                  image_path: https://wikinetworth.com/uploads/images/holly-willoughby-husband-family-height.jpg?ezimgfmt=rs:250x250/rscb2/ng:webp/ngcb2
                  birth: '2008-01-24 00:00:00.000'
                  email: student-user5@gmail.com
                  phone: 2345-678-901
                  parent_first_name: parent_first_name1
                  parent_last_name: parent_last_name1
                  parent_email: ''
                  parent_phone: '+13456678'
                  orders: [
                      {
                        "id": "9a2e41-1lk;afea-afewfa-afa",
                        "product_name": "private tutoring Basic",
                        "price": "100.00",
                        "created_date": "2021-06-24 13:14:36.036"
                      },
                      {
                        "id": "efese1-efeeafea-3233fa-afa",
                        "product_name": "private tutoring Premium",
                        "price": "200.00",
                        "created_date": "2021-08-24 15:14:36.036"
                      }
                  ]
                  type: student
                  created_date: '2020-07-27 18:34:49.049'
                  updated_date: '2020-07-27 18:34:49.049'
                - user_id: d55c4d00a85e
                  first_name: student1
                  last_name: full
                  image_path: https://wikinetworth.com/uploads/images/alex-karpovsky.jpg?ezimgfmt=rs:250x250/rscb2/ng:webp/ngcb2
                  birth: '2008-01-24 00:00:00.000'
                  email: student-user1@gmail.com
                  phone: '1234567890'
                  parent_first_name: parent_first_name1
                  parent_last_name: parent_last_name1
                  parent_email: sample-parent1@gmail.com
                  parent_phone: 456-789-0123
                  orders: [
                      {
                        "id": "139waj-efw:a32-eiw38yjf-3rlk2",
                        "product_name": "private tutoring Basic",
                        "price": "100.00",
                        "created_date": "2021-06-29 20:22:38.123"
                      },
                  ]
                  type: student
                  created_date: '2021-06-16 18:34:49.049'
                  updated_date: '2021-06-16 18:34:49.049'

        default:
          description: error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  #tak
  /users/detail:
    get:
      tags:
        - users
      description: Get a specific user data by the user_id.
      parameters:
        - $ref: '#/components/parameters/User-id'
        - $ref: '#/components/parameters/UserInfoFromSocialMedia'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    # Tak
    put:
      tags:
        - users
      description: Update (create) a user's details by the user_id.     <ul><li>`create:`  If you specify a user id which doesn't exit, it will create a new user with using request body. </li><li>`update:` If you specify a user id which already exits, it will update user's details with using request body. ⚠️ If you do not include any `optional` key, its value will automatically be rest and filled empty string "".</li> <ul>
      parameters:
        - $ref: '#/components/parameters/User-id'
      requestBody:
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                first_name:
                  type: 'string'
                  description: |
                    <span style="color: red; ">*required</span> User's first name
                last_name:
                  type: 'string'
                  description: |
                    <span style="color: red; ">*required</span> User's last name
                image_path:
                  type: string
                  description: |
                    \<optional> The path of a user's profile image
                birth:
                  type: string
                  format: yyyy-MM-dd HH:mm:ss.sss
                  description: |
                    <span style="color: red; ">*required</span> User's birth day
                email:
                  type: string
                  format: email
                  description: |
                    <span style="color: red; ">*required</span> User's email
                phone:
                  type: string
                  description: |
                    <span style="color: red; ">*required</span> User's phone number
                parent_first_name:
                  type: string
                  description: |
                    \<optional><br>
                    User's parents first name
                parent_last_name:
                  type: string
                  description: |
                    \<optional><br>
                    User's parents last name
                parent_email:
                  type: string
                  format: email
                  description: |
                    \<optional><br>
                    User's parents email
                parent_phone:
                  type: string
                  description: |
                    \<optional><br>
                    User's parents phone number
                orders:
                  type: array
                  items: 
                    type: object
                    properties:
                      id:
                        type: string
                      product_name:
                        type: string
                      price:
                        type: string
                      created_date:
                        type: string
                        format: yyyy-MM-dd HH:mm:ss.sss
                  description: |
                    \<optional><br>
                    User's order(payment) history.                

              example:
                first_name: Brooklyn
                last_name: Beckham
                image_path: 'https://sampledata.png'
                birth: '1994-01-24 00:00:00.000'
                email: student1@gmail.com
                phone: 123-456-7890
                parent_first_name: David
                parent_last_name: Beckham
                parent_email: parent1@gmail.com
                parent_phone: 456-789-0123
                orders: [
                      {
                        "id": "9a2e41-1lk;afea-afewfa-afa",
                        "product_name": "private tutoring Basic",
                        "price": "200.00",
                        "created_date": "2021-06-24 13:14:36.036"
                      },
                      {
                        "id": "efese1-efeeafea-3233fa-afa",
                        "product_name": "private tutoring Premium",
                        "price": "300.00",
                        "created_date": "2021-08-24 15:14:36.036"
                      },
              ]

      responses:
        200:
          description: updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
                example:
                  user_id: 442c16a8a353
                  first_name: Brooklyn
                  last_name: Beckham
                  image_path: 'https://sampledata.png'
                  birth: '1994-01-24 00:00:00.000'
                  email: student1@gmail.com
                  phone: 123-456-7890
                  parent_first_name": David
                  parent_last_name": Beckham
                  parent_email: parent1@gmail.com
                  parent_phone: 456-789-0123
                  orders: [
                      {
                        "id": "9a2e41-1lk;afea-afewfa-afa",
                        "product_name": "private tutoring Basic",
                        "price": "200.00",
                        "created_date": "2021-06-24 13:14:36.036"
                      },
                      {
                        "id": "efese1-efeeafea-3233fa-afa",
                        "product_name": "private tutoring Premium",
                        "price": "300.00",
                        "created_date": "2021-08-24 15:14:36.036"
                      },
                  ]
                  type: student
                  created_date: '2021-05-20 22:00:40.464'
                  updated_date: '2021-05-22 10:00:40.838'
        default:
          description: error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Tak
  /users/courses:
    get:
      tags:
        - users
      description: Get all course_ids that a user has.
      parameters:
        - $ref: '#/components/parameters/User-id'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    course_id:
                      type: string
                      description: 'Unique course ID which belongs to the user_id.'
                    status:
                      type: string
                      description: |
                        A user's status for the course (course_id).
                        There are four status
                        - wait list
                          - A user who applied but not in the process because the course is not ready (the course is "inactive").
                        - applied
                          - A user who already applied but hasn't registered (got interview or paid tuition fee) yet.
                        - registered
                          - A user who already registered (got interview and paid tuition free) to the course.
                        - resigned
                          - A user who quit the class for some reason.
                    created_date:
                      type: string
                      format: yyyy-MM-dd HH:mm:ss.sss
                      description: |
                        Timestamp which this data was first created. Following to ISO 8601 format. yyyy-MM-dd hh:mm:ss.sss
                    updated_date:
                      type: string
                      format: yyyy-MM-dd HH:mm:ss.sss
                      description: |
                        Timestamp which this data was first created. Following to ISO 8601 format. yyyy-MM-dd hh:mm:ss.sss
              example:
                - course_id: DPCS100-1
                  status: registered
                  created_date: '2021-05-20 22:00:40.464'
                  updated_date: '2021-05-22 10:00:40.838'
                - course_id: DPCS100-2
                  status: wait list
                  created_date: '2021-05-20 22:00:40.464'
                  updated_date: '2021-05-22 10:00:40.838'
                - course_id: DPCS101-1
                  status: resigned
                  created_date: '2021-05-20 22:00:40.464'
                  updated_date: '2021-05-22 10:00:40.838'

        default:
          description: error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Tak
  /users/{course_id}/status:
    get:
      tags:
        - users
      description: Get the user's status for the course.
      parameters:
        - $ref: '#/components/parameters/User-id'
        - $ref: '#/components/parameters/Course-id'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    description: |
                      A user's status for the course (course_id).
                      There are four status
                      - wait list
                        - A user who applied but not in the process because the course is not ready (the course is "inactive").
                      - applied
                        - A user who already applied but hasn't registered (got interview or paid tuition fee) yet.
                      - registered
                        - A user who already registered (got interview and paid tuition free) to the course.
                      - resigned
                        - A user who quit the class for some reason.
                  created_date:
                    type: string
                    format: yyyy-MM-dd HH:mm:ss.sss
                    description: |
                      Timestamp which this data was first created. Following to ISO 8601 format. yyyy-MM-dd hh:mm:ss.sss
                  updated_date:
                    type: string
                    format: yyyy-MM-dd HH:mm:ss.sss
                    description: |
                      Timestamp which this data was first created. Following to ISO 8601 format. yyyy-MM-dd hh:mm:ss.sss
              example:
                status: 'registered'
                created_date: '2021-05-20 22:00:40.464'
                updated_date: '2021-05-21 23:01:40.464'

        default:
          description: error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    # Tak
    put:
      tags:
        - users
      description: Update the user's status for the course.
      parameters:
        - $ref: '#/components/parameters/User-id'
        - $ref: '#/components/parameters/Course-id'
      requestBody:
        content:
          application/json:
            schema:
              properties:
                status:
                  type: string
                  description: |
                    <span style="color: red; ">*required</span> A user's status for the course (course_id).<br>
                    There are four status: <br>
                    - wait list
                      - A user who applied but not in the process because the course is not ready (the course is "inactive").
                    - applied
                      - A user who already applied but hasn't registered (got interview or paid tuition fee) yet.
                    - registered
                      - A user who already registered (got interview and paid tuition free) to the course.
                    - resigned
                      - A user who quit the class for some reason.
            example:
              status: registered
      responses:
        200:
          description: updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /courses:
    # Yasu
    get:
      tags:
        - courses
      description: Get all courses data.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
              example:
                - price:
                    contents_only: '100'
                    online_course: '200'
                  level: Beginner
                  created_date: '2021-05-31 22:30:12.421'
                  status: archived
                  description: >-
                    Learn the basics of programming and computer science through Python. This
                    course aims to teach everyone the basics of programming. You will learn to
                    create simple computer programs, develop problem-solving skills, and work
                    through fun challenges. Once a student completes this course, they will be
                    ready to take more advanced courses.
                  prerequisites:
                    - None
                  available_schedules:
                    - Monday 4:00pm - 6:00pm
                    - Saturday 10:00am - 12:00pm
                  summary: >-
                    An introduction to the fundamentals of computer science and the art of
                    programming
                  category: cs
                  image_path: https://dev_dpCode.academy/courses/dpcs100.svg
                  end_date: '2021-03-31 00:00:00.000'
                  name: Intro to Computer Science
                  length:
                    month: '3'
                    weeks: '12'
                    hours: '2'
                  course_id: DPCS100-1
                  start_date: '2021-01-01 00:00:00.000'
                  features:
                    - A broad and robust understanding of computer science and programming.
                    - Explore fundamental programming concepts in Python
                    - How to think algorithmically and solve programming problems efficiently
                    - Learn the tools and debugging techniques
                    - How to develop and present a final programming project
                  updated_date: '2021-05-31 22:30:12.421'
                - price:
                    contents_only: '191'
                    online_course: '292'
                  level: Advanced
                  created_date: '2021-05-30 20:29:13.420'
                  status: archived
                  description: >-
                    During the course, you will learn everything needed to participate in real
                    competitions and prepare for software engineer technical interviews. We
                    focus on the ability to analyze problem statements, apply algorithmic ideas
                    to real problems and write efficient, reliable, and compact code in C/C++.
                    We also cover a wide range of advanced algorithms and data structures in
                    this course (equivalent to advanced computer science courses in most
                    universities).
                  prerequisites:
                    - DPCS200
                    - Programming Experience in C/C++
                  available_schedules:
                    - Wednesday 7:00pm - 9:00pm
                  summary: >-
                    Advanced Algorithms & Data Structures, CCC (Canadian Computing Competition)
                    - Senior Division Prep Course
                  category: cs
                  image_path: https://dev_dpCode.academy/courses/dpcs100.svg
                  end_date: '2022-01-31 00:00:00.000'
                  name: ADVANCED COMPETITIVE PROGRAMMING
                  length:
                    month: '5'
                    weeks: '20'
                    hours: '2'
                  course_id: DPCS300-3
                  start_date: '2021-11-01 00:00:00.000'
                  features:
                    - >-
                      Advanced Algorithms and Data Structures such as Greedy Algorithms, Dynamic
                      Programming and more!
                    - How to think algorithmically and solve programming problems efficiently
                    - Learn the tools and debugging techniques in C/C++
                    - How to ace software engineer tech interviews
                    - >-
                      Solve real problems to prepare for the Competition such as ACM-ICPC,
                      Google Code Jam and CCC (Canadian Computing Competition)
                  updated_date: '2021-05-30 20:29:13.420'
                - price:
                    contents_only: '193'
                    online_course: '293'
                  level: Advanced
                  created_date: '2021-05-30 20:29:13.420'
                  status: archived
                  description: >-
                    During the course, you will learn everything needed to participate in real
                    competitions and prepare for software engineer technical interviews. We
                    focus on the ability to analyze problem statements, apply algorithmic ideas
                    to real problems and write efficient, reliable, and compact code in C/C++.
                    We also cover a wide range of advanced algorithms and data structures in
                    this course (equivalent to advanced computer science courses in most
                    universities).
                  prerequisites:
                    - DPCS200
                    - Programming Experience in C/C++
                  available_schedules:
                    - Wednesday 7:00pm - 9:00pm
                  summary: >-
                    Advanced Algorithms & Data Structures, CCC (Canadian Computing Competition)
                    - Senior Division Prep Course
                  category: cs
                  image_path: https://dev_dpCode.academy/courses/dpcs100.svg
                  end_date: '2022-04-30 00:00:00.000'
                  name: ADVANCED COMPETITIVE PROGRAMMING
                  length:
                    month: '5'
                    weeks: '20'
                    hours: '2'
                  course_id: DPCS300-4
                  start_date: '2022-02-01 00:00:00.000'
                  features:
                    - >-
                      Advanced Algorithms and Data Structures such as Greedy Algorithms, Dynamic
                      Programming and more!
                    - How to think algorithmically and solve programming problems efficiently
                    - Learn the tools and debugging techniques in C/C++
                    - How to ace software engineer tech interviews
                    - >-
                      Solve real problems to prepare for the Competition such as ACM-ICPC,
                      Google Code Jam and CCC (Canadian Computing Competition)
                  updated_date: '2021-05-30 20:29:13.420'
                - price:
                    contents_only: '194'
                    online_course: '294'
                  level: Advanced
                  created_date: '2021-05-30 20:29:12.420'
                  status: archived
                  description: >-
                    During the course, you will learn everything needed to participate in real
                    competitions and prepare for software engineer technical interviews. We
                    focus on the ability to analyze problem statements, apply algorithmic ideas
                    to real problems and write efficient, reliable, and compact code in C/C++.
                    We also cover a wide range of advanced algorithms and data structures in
                    this course (equivalent to advanced computer science courses in most
                    universities).
                  prerequisites:
                    - DPCS200
                    - Programming Experience in C/C++
                  available_schedules:
                    - Wednesday 7:00pm - 9:00pm
                  summary: >-
                    Advanced Algorithms & Data Structures, CCC (Canadian Computing Competition)
                    - Senior Division Prep Course
                  category: cs
                  image_path: https://dev_dpCode.academy/courses/dpcs100.svg
                  end_date: '2022-07-31 00:00:00.000'
                  name: ADVANCED COMPETITIVE PROGRAMMING
                  length:
                    month: '5'
                    weeks: '20'
                    hours: '2'
                  course_id: DPCS300-5
                  start_date: '2022-05-01 00:00:00.000'
                  features:
                    - >-
                      Advanced Algorithms and Data Structures such as Greedy Algorithms, Dynamic
                      Programming and more!
                    - How to think algorithmically and solve programming problems efficiently
                    - Learn the tools and debugging techniques in C/C++
                    - How to ace software engineer tech interviews
                    - >-
                      Solve real problems to prepare for the Competition such as ACM-ICPC,
                      Google Code Jam and CCC (Canadian Computing Competition)
                  updated_date: '2021-05-30 20:29:12.420'
                - price:
                    contents_only: '130'
                    online_course: '230'
                  level: Intermediate
                  created_date: '2020-05-20 21:30:12.421'
                  status: active
                  description: >-
                    Learn the fundamentals of algorithms and data structures. This course aims
                    to help students to learn everything needed to participate in CCC - Junior
                    Division competitions. We start from basics such as Mathematics
                    Fundamentals, Searching/Sorting and Linear Data Structures. Then we dive
                    into interesting challenges and tips/tricks on how to think algorithmically
                    and solve problems efficiently.
                  prerequisites:
                    - DPCS100
                    - Basic knowledge of Python programming language
                  available_schedules:
                    - Tuesday 4:00pm - 6:00pm
                    - Thursday 4:00pm - 6:00pm
                  summary: >-
                    Basic Algorithms & Data Structures, CCC (Canadian Computing Competition) -
                    Junior Division Prep Course
                  category: cs
                  image_path: https://dev_dpCode.academy/courses/dpcs100.svg
                  end_date: '2021-06-30 00:00:00.000'
                  name: Intro to Competitive Programming
                  length:
                    month: '5'
                    weeks: '20'
                    hours: '2'
                  course_id: DPCS101-1
                  start_date: '2021-04-01 00:00:00.000'
                  features:
                    - Learn the fundamentals of algorithms and data structures
                    - Build a solid foundation to become a Competitive Programming wizard
                    - How to think algorithmically and solve programming problems efficiently
                    - >-
                      Solve classical problems to prepare for the Competition such as CCC
                      (Canadian Computing Competition)
                  updated_date: '2020-05-20 21:30:12.421'
                - price:
                    contents_only: '170'
                    online_course: '270'
                  level: Advanced
                  created_date: '2021-06-20 21:30:13.420'
                  status: inactive
                  description: >-
                    C has been around for more than 40 years but it is still one of the most
                    used promgramming language. This course aims to teach students on how things
                    actually work under the hood. You will learn about how hardware works with
                    our code, manual memory management and creating an application using modern
                    C/C++. Memory management is critical to modern high-performance
                    applications, with C/C++ continuing to be the industry standard for
                    applications dealing with dynamic memory. In addition, memory management is
                    an essential topic for those who want to be the top 1% software engineers!
                  prerequisites:
                    - DPCS101
                    - DPCS102
                  available_schedules:
                    - Wednesday 4:00pm - 6:00pm
                  summary: C/C++ Programming Language for Computer Science and Competitive Programming
                  category: cs
                  image_path: https://dev_dpCode.academy/courses/dpcs100.svg
                  end_date: '2022-01-31 00:00:00.000'
                  name: C/C++ PROGRAMMING LANGUAGE
                  length:
                    month: '5'
                    weeks: '20'
                    hours: '2'
                  course_id: DPCS200-3
                  start_date: '2021-11-01 00:00:00.000'
                  features:
                    - ANSI C/C89, C99 and C11/18 standards
                    - Fundamentals of Modern C/C++ Program Design
                    - Working knowledge of Memory Management
                    - How to develop and present a final programming project
                  updated_date: '2021-06-20 21:30:13.420'
                - price:
                    contents_only: '120'
                    online_course: '220'
                  level: Beginner
                  created_date: '2022-05-20 21:30:12.421'
                  status: inactive
                  description: >-
                    Learn the basics of programming and computer science through Python. This
                    course aims to teach everyone the basics of programming. You will learn to
                    create simple computer programs, develop problem-solving skills, and work
                    through fun challenges. Once a student completes this course, they will be
                    ready to take more advanced courses.
                  prerequisites:
                    - None
                  available_schedules:
                    - Monday 4:00pm - 6:00pm
                    - Saturday 10:00am - 12:00pm
                  summary: >-
                    An introduction to the fundamentals of computer science and the art of
                    programming
                  category: cs
                  image_path: https://dev_dpCode.academy/courses/dpcs100.svg
                  end_date: '2022-10-31 00:00:00.000'
                  name: Intro to Computer Science
                  length:
                    month: '3'
                    weeks: '12'
                    hours: '2'
                  course_id: DPCS100-3
                  start_date: '2021-07-01 00:00:00.000'
                  features:
                    - A broad and robust understanding of computer science and programming.
                    - Explore fundamental programming concepts in Python
                    - How to think algorithmically and solve programming problems efficiently
                    - Learn the tools and debugging techniques
                    - How to develop and present a final programming project
                  updated_date: '2022-05-20 21:30:12.421'
                - price:
                    contents_only: '180'
                    online_course: '280'
                  level: Advanced
                  created_date: '2021-05-30 21:30:13.420'
                  status: archived
                  description: >-
                    During the course, you will learn everything needed to participate in real
                    competitions and prepare for software engineer technical interviews. We
                    focus on the ability to analyze problem statements, apply algorithmic ideas
                    to real problems and write efficient, reliable, and compact code in C/C++.
                    We also cover a wide range of advanced algorithms and data structures in
                    this course (equivalent to advanced computer science courses in most
                    universities).
                  prerequisites:
                    - DPCS200
                    - Programming Experience in C/C++
                  available_schedules:
                    - Wednesday 7:00pm - 9:00pm
                  summary: >-
                    Advanced Algorithms & Data Structures, CCC (Canadian Computing Competition)
                    - Senior Division Prep Course
                  category: cs
                  image_path: https://dev_dpCode.academy/courses/dpcs100.svg
                  end_date: '2021-06-30 00:00:00.000'
                  name: ADVANCED COMPETITIVE PROGRAMMING
                  length:
                    month: '5'
                    weeks: '20'
                    hours: '2'
                  course_id: DPCS300-1
                  start_date: '2021-04-01 00:00:00.000'
                  features:
                    - >-
                      Advanced Algorithms and Data Structures such as Greedy Algorithms, Dynamic
                      Programming and more!
                    - How to think algorithmically and solve programming problems efficiently
                    - Learn the tools and debugging techniques in C/C++
                    - How to ace software engineer tech interviews
                    - >-
                      Solve real problems to prepare for the Competition such as ACM-ICPC,
                      Google Code Jam and CCC (Canadian Computing Competition)
                  updated_date: '2021-05-30 21:30:13.420'
                - price:
                    contents_only: '195'
                    online_course: '295'
                  level: Advanced
                  created_date: '2021-05-30 20:29:14.420'
                  status: active
                  description: >-
                    During the course, you will learn everything needed to participate in real
                    competitions and prepare for software engineer technical interviews. We
                    focus on the ability to analyze problem statements, apply algorithmic ideas
                    to real problems and write efficient, reliable, and compact code in C/C++.
                    We also cover a wide range of advanced algorithms and data structures in
                    this course (equivalent to advanced computer science courses in most
                    universities).
                  prerequisites:
                    - DPCS200
                    - Programming Experience in C/C++
                  available_schedules:
                    - Wednesday 7:00pm - 9:00pm
                  summary: >-
                    Advanced Algorithms & Data Structures, CCC (Canadian Computing Competition)
                    - Senior Division Prep Course
                  category: cs
                  image_path: https://dev_dpCode.academy/courses/dpcs100.svg
                  end_date: '2022-10-31 00:00:00.000'
                  name: ADVANCED COMPETITIVE PROGRAMMING
                  length:
                    month: '5'
                    weeks: '20'
                    hours: '2'
                  course_id: DPCS300-6
                  start_date: '2022-08-01 00:00:00.000'
                  features:
                    - >-
                      Advanced Algorithms and Data Structures such as Greedy Algorithms, Dynamic
                      Programming and more!
                    - How to think algorithmically and solve programming problems efficiently
                    - Learn the tools and debugging techniques in C/C++
                    - How to ace software engineer tech interviews
                    - >-
                      Solve real problems to prepare for the Competition such as ACM-ICPC,
                      Google Code Jam and CCC (Canadian Computing Competition)
                  updated_date: '2021-05-30 20:29:14.420'
                - price:
                    contents_only: '140'
                    online_course: '240'
                  level: Intermediate
                  created_date: '2021-06-20 21:30:12.421'
                  status: active
                  description: >-
                    World Class AP Computer Science A Prep course! This course aims to help
                    students get a 5 on AP Computer Science A exam. Our course is proven by many
                    of our students to guarantee you a 5 on the actual AP exam. We approach this
                    course from a software engineer`s point of view, give students a solid
                    understanding of Object-Oriented Programming in Java. We also review all
                    materials provided by College Board for AP Computer Science A Exam and go
                    beyond the requirements to solidify the concepts through our real-world
                    projects!
                  prerequisites:
                    - DPCS101
                    - Grade 11 or higher
                    - Prior Programming Experience
                  available_schedules:
                    - Tuesday 7:00pm - 8:30pm
                    - Thursday 7:00pm - 8:30pm
                    - Saturday 1pm - 4pm
                  summary: Object-Oriented Programming in Java & AP Computer Science A Prep Course
                  category: cs
                  image_path: https://dev_dpCode.academy/courses/dpcs100.svg
                  end_date: '2021-06-30 00:00:00.000'
                  name: AP COMPUTER SCIENCE A
                  length:
                    month: '6'
                    weeks: '26'
                    hours: '3'
                  course_id: DPCS102-1
                  start_date: '2021-04-01 00:00:00.000'
                  features:
                    - How to get a 5 on the AP Computer Science A Exam
                    - Object-Oriented Programming in Java
                    - >-
                      Designing a program, developing the algorithms it needs, and writing code
                      to implement them
                    - >-
                      Learn the tools, debugging techniques and how to use Java API
                      documentation in writing programs
                    - Apply Object-Oriented concepts when developing real-world programs
                  updated_date: '2021-06-20 21:30:12.421'
                - price:
                    contents_only: '110'
                    online_course: '210'
                  level: Beginner
                  created_date: '2021-05-20 21:30:12.421'
                  status: active
                  description: >-
                    Learn the basics of programming and computer science through Python. This
                    course aims to teach everyone the basics of programming. You will learn to
                    create simple computer programs, develop problem-solving skills, and work
                    through fun challenges. Once a student completes this course, they will be
                    ready to take more advanced courses.
                  prerequisites:
                    - None
                  available_schedules:
                    - Monday 4:00pm - 6:00pm
                    - Saturday 10:00am - 12:00pm
                  summary: >-
                    An introduction to the fundamentals of computer science and the art of
                    programming
                  category: cs
                  image_path: https://dev_dpCode.academy/courses/dpcs100.svg
                  end_date: '2021-06-30 00:00:00.000'
                  name: Intro to Computer Science
                  length:
                    month: '3'
                    weeks: '12'
                    hours: '2'
                  course_id: DPCS100-2
                  start_date: '2021-04-01 00:00:00.000'
                  features:
                    - A broad and robust understanding of computer science and programming.
                    - Explore fundamental programming concepts in Python
                    - How to think algorithmically and solve programming problems efficiently
                    - Learn the tools and debugging techniques
                    - How to develop and present a final programming project
                  updated_date: '2021-05-20 21:30:12.421'
                - price:
                    contents_only: '150'
                    online_course: '250'
                  level: Advanced
                  created_date: '2021-06-20 21:30:13.421'
                  status: active
                  description: >-
                    C has been around for more than 40 years but it is still one of the most
                    used promgramming language. This course aims to teach students on how things
                    actually work under the hood. You will learn about how hardware works with
                    our code, manual memory management and creating an application using modern
                    C/C++. Memory management is critical to modern high-performance
                    applications, with C/C++ continuing to be the industry standard for
                    applications dealing with dynamic memory. In addition, memory management is
                    an essential topic for those who want to be the top 1% software engineers!
                  prerequisites:
                    - DPCS101
                    - DPCS102
                  available_schedules:
                    - Wednesday 4:00pm - 6:00pm
                  summary: C/C++ Programming Language for Computer Science and Competitive Programming
                  category: cs
                  image_path: https://dev_dpCode.academy/courses/dpcs100.svg
                  end_date: '2021-06-30 00:00:00.000'
                  name: C/C++ PROGRAMMING LANGUAGE
                  length:
                    month: '5'
                    weeks: '20'
                    hours: '2'
                  course_id: DPCS200-1
                  start_date: '2021-04-01 00:00:00.000'
                  features:
                    - ANSI C/C89, C99 and C11/18 standards
                    - Fundamentals of Modern C/C++ Program Design
                    - Working knowledge of Memory Management
                    - How to develop and present a final programming project
                  updated_date: '2021-06-20 21:30:13.421'
                - price:
                    contents_only: '160'
                    online_course: '260'
                  level: Advanced
                  created_date: '2021-06-20 21:30:13.422'
                  status: inactive
                  description: >-
                    C has been around for more than 40 years but it is still one of the most
                    used promgramming language. This course aims to teach students on how things
                    actually work under the hood. You will learn about how hardware works with
                    our code, manual memory management and creating an application using modern
                    C/C++. Memory management is critical to modern high-performance
                    applications, with C/C++ continuing to be the industry standard for
                    applications dealing with dynamic memory. In addition, memory management is
                    an essential topic for those who want to be the top 1% software engineers!
                  prerequisites:
                    - DPCS101
                    - DPCS102
                  available_schedules:
                    - Wednesday 4:00pm - 6:00pm
                  summary: C/C++ Programming Language for Computer Science and Competitive Programming
                  category: cs
                  image_path: https://dev_dpCode.academy/courses/dpcs100.svg
                  end_date: '2022-10-31 00:00:00.000'
                  name: C/C++ PROGRAMMING LANGUAGE
                  length:
                    month: '5'
                    weeks: '20'
                    hours: '2'
                  course_id: DPCS200-2
                  start_date: '2021-07-01 00:00:00.000'
                  features:
                    - ANSI C/C89, C99 and C11/18 standards
                    - Fundamentals of Modern C/C++ Program Design
                    - Working knowledge of Memory Management
                    - How to develop and present a final programming project
                  updated_date: '2021-06-20 21:30:13.422'
                - price:
                    contents_only: '190'
                    online_course: '290'
                  level: Advanced
                  created_date: '2021-05-30 20:30:13.420'
                  status: archived
                  description: >-
                    During the course, you will learn everything needed to participate in real
                    competitions and prepare for software engineer technical interviews. We
                    focus on the ability to analyze problem statements, apply algorithmic ideas
                    to real problems and write efficient, reliable, and compact code in C/C++.
                    We also cover a wide range of advanced algorithms and data structures in
                    this course (equivalent to advanced computer science courses in most
                    universities).
                  prerequisites:
                    - DPCS200
                    - Programming Experience in C/C++
                  available_schedules:
                    - Wednesday 7:00pm - 9:00pm
                  summary: >-
                    Advanced Algorithms & Data Structures, CCC (Canadian Computing Competition)
                    - Senior Division Prep Course
                  category: cs
                  image_path: https://dev_dpCode.academy/courses/dpcs100.svg
                  end_date: '2022-10-31 00:00:00.000'
                  name: ADVANCED COMPETITIVE PROGRAMMING
                  length:
                    month: '5'
                    weeks: '20'
                    hours: '2'
                  course_id: DPCS300-2
                  start_date: '2021-07-01 00:00:00.000'
                  features:
                    - >-
                      Advanced Algorithms and Data Structures such as Greedy Algorithms, Dynamic
                      Programming and more!
                    - How to think algorithmically and solve programming problems efficiently
                    - Learn the tools and debugging techniques in C/C++
                    - How to ace software engineer tech interviews
                    - >-
                      Solve real problems to prepare for the Competition such as ACM-ICPC,
                      Google Code Jam and CCC (Canadian Computing Competition)
                  updated_date: '2021-05-30 20:30:13.420'

  /courses/{course_id}:
    # Daiki
    get:
      tags:
        - courses
      description: Get specific courses data by its id.
      parameters:
        - $ref: '#/components/parameters/Course-id'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        default:
          description: error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    # Tak
    put:
      tags:
        - courses
      description: Update the status of the course by its id.
      parameters:
        - $ref: '#/components/parameters/Course-id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: registered
                  description: |
                    A user's status for the course (course_id).<br>
                    There are four status: <br>
                    - wait list
                      - A user who applied but not in the process because the course is not ready (the course is "inactive").
                    - applied
                      - A user who already applied but hasn't registered (got interview or paid tuition fee) yet.
                    - registered
                      - A user who already registered (got interview and paid tuition free) to the course.
                    - resigned
                      - A user who quit the class for some reason.
            example:
              status: active
      responses:
        200:
          description: updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        default:
          description: error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  #Tak
  /courses/{course_id}/users:
    get:
      tags:
        - courses
      description: Get all user-ids that a course has.
      parameters:
        - $ref: '#/components/parameters/Course-id'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Status'
              example:
                - user_id: 442c16a8a353
                  status: registered
                  created_date: '2021-05-20 22:00:40.464'
                  updated_date: '2021-05-22 10:00:40.838'
                - user_id: ffaaafecc0e9
                  status: wait list
                  created_date: '2021-05-20 22:00:40.464'
                  updated_date: '2021-05-22 10:00:40.838'
                - user_id: d55c4d00a85e
                  status: applied
                  created_date: '2021-05-20 22:00:40.464'
                  updated_date: '2021-05-22 10:00:40.838'

        default:
          description: error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    # Daiki
    post:
      tags:
        - courses
      description: Add a user to a course
      parameters:
        - $ref: '#/components/parameters/User-id'
        - $ref: '#/components/parameters/Course-id'
      requestBody:
        content:
          application/json:
            schema:
              properties:
                user_status:
                  type: string
                  description: |
                    <span style="color: red; ">*required</span> A user's status for the course (course_id).<br>
                    There are four status: <br>
                    - wait list
                      - A user who applied but not in the process because the course is not ready (the course is "inactive").
                    - applied
                      - A user who already applied but hasn't registered (got interview or paid tuition fee) yet.
                    - registered
                      - A user who already registered (got interview and paid tuition free) to the course.
                    - resigned
                      - A user who quit the class for some reason.
              example:
                user_status: registered

      responses:
        200:
          description: created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'

  /send-email:
    # Daiki
    post:
      tags:
        - email
      description: Send email to admin
      requestBody:
        content:
          application/json:
            schema:
              properties:
                course_id:
                  type: string
                  description: |
                    <span style="color: red; ">*required</span> Unique course ID.
                first_name:
                  type: string
                  description: |
                    <span style="color: red; ">*required</span> User's first name
                last_name:
                  type: string
                  description: |
                    <span style="color: red; ">*required</span> User's last name
                email:
                  type: string
                  format: email
                  description: |
                    <span style="color: red; ">*required</span> User's email
                phone:
                  type: string
                  description: |
                    <span style="color: red; ">*required</span> User's phone number
              example:
                course_id: DPCS100-1
                first_name: Brooklyn
                last_name: Beckham
                email: student1@gmail.com
                phone: 123-456-7890

      responses:
        200:
          description: created
          content:
            application/json:
              schema:
                properties:
                  course_id:
                    type: string
                    description: |
                      <span style="color: red; ">*required</span> Unique course ID.
                  first_name:
                    type: string
                    description: |
                      <span style="color: red; ">*required</span> User's first name
                  last_name:
                    type: string
                    description: |
                      <span style="color: red; ">*required</span> User's last name
                  email:
                    type: string
                    format: email
                    description: |
                      <span style="color: red; ">*required</span> User's email
                  phone:
                    type: string
                    description: |
                      <span style="color: red; ">*required</span> User's phone number
                example:
                  course_id: DPCS100-1
                  first_name: Brooklyn
                  last_name: Beckham
                  email: student1@gmail.com
                  phone: 123-456-7890

components:
  parameters:
    UserInfoFromSocialMedia:
      name: Authorization
      in: header
      description: identify user by access token
      required: true
      example: Beaer ACCESS_TOKEN
      schema:
        type: string
    PageLimit:
      name: limit
      in: query
      description: Limits the number
      schema:
        type: integer
    User-id:
      name: user_id
      in: header
      example: eyJz9sdfsdfsdfsd
      description: User ID (token id)
      required: true
      schema:
        type: string
    Course-id:
      name: course_id
      in: path
      example: DPCS100-1
      description: Course ID
      required: true
      schema:
        type: string

  schemas:
    # Daiki
    User:
      type: object
      properties:
        user_id:
          type: string
          example: 442c16a8a353
          description: |
            User's unique id published by cognito.
        first_name:
          type: string
          example: Brooklyn
          description: |
            User's first name
        last_name:
          type: string
          example: Beckham
          description: |
            User's last name
        image_path:
          type: string
          example: https://wikinetworth.com/uploads/images/brooklyn-beckham.jpg?ezimgfmt=rs:340x340/rscb2/ng:webp/ngcb2
          description: |
            The path of a user's profile image
        birth:
          type: string
          format: yyyy-MM-dd HH:mm:ss.sss
          example: '1994-01-24 00:00:00.000'
          description: |
            User's birth day
        email:
          type: string
          format: email
          example: student1@gmail.com
          description: |
            User's email
        phone:
          type: string
          example: 123-456-7890
          description: |
            User's phone number
        parent_first_name:
          type: string
          example: David
          description: |
            Optional<br>
            User's parents first name
        parent_last_name:
          type: string
          example: Beckham
          description: |
            Optional<br>
            User's parents last name
        parent_email:
          type: string
          format: email
          example: parent1@gmail.com
          description: |
            Optional<br>
            User's parents email
        parent_phone:
          type: string
          example: 456-789-0123
          description: |
            Optional<br>
            User's parents phone number
        orders:
          description: |
            Optional<br>
            User's order(payment) history.
          type: array
          items: 
            type: object
            properties:
              id:
                type: string
                description: 'unique id used to identify the order'
                example: "9a2e41-1lk;afea-afewfa-afa"
              product_name:
                type: string
                description: 'name of the product'
                example: 'private tutoring Basic'
              price:
                type: string
                description: 'price of the product'
                example: '200.00'
              created_date:
                type: string
                format: yyyy-MM-dd HH:mm:ss.sss
                description: 'time stamp when the order has completed'
                example: '2021-06-24 13:14:36.036'
          example: [
                      {
                        "id": "9a2e41-1lk;afea-afewfa-afa",
                        "product_name": "private tutoring Basic",
                        "price": 2100.00",
                        "created_date": "2021-06-24 13:14:36.036"
                      },
                      {
                        "id": "efese1-efeeafea-3233fa-afa",
                        "product_name": "private tutoring Premium",
                        "price": "300.00",
                        "created_date": "2021-08-24 15:14:36.036"
                      },
                  ]
        type:
          type: string
          example: admin
          description: |
            User's type<br>
            Acceptable values are:
            - student
            - admin
        created_date:
          type: string
          format: yyyy-MM-dd HH:mm:ss.sss
          example: '2021-05-20 22:00:40.464'
          description: |
            Timestamp which this data was first created. Following to ISO 8601 format. yyyy-MM-dd hh:mm:ss.sss
        updated_date:
          type: string
          format: yyyy-MM-dd HH:mm:ss.sss
          example: '2021-05-22 10:00:40.838'
          description: |
            Timestamp which this data was first created. Following to ISO 8601 format. yyyy-MM-dd hh:mm:ss.sss

    # Tak
    Course:
      type: object
      properties:
        course_id:
          type: string
          example: DPCS100-1
          description: |
            Unique course ID. First word until - indicates the course prime id. The second word (after -) indicates seasons. For example, if a course has three times in a year, it will be like,
            - Jan - Apr
              - DPCS100-1
            - May - Aug
              - DPCS100-2
            - Sep - Dec
              - DPCS100-3
        name:
          type: string
          example: ADVANCED COMPETITIVE PROGRAMMING
          description: |
            Course name.
        category:
          type: string
          example: cs
          description: |
            Course category. <br>
            Acceptable values are:
            - cs
            - mobile
            - web
            - math
        status:
          type: string
          example: active
          description: |
            Course status<br>
            Acceptable values are:
            - archived
              - A course which has already finished
            - active
              - A course which is now on going
            - inactive
              - A course which is will be "active" in the future. If an user apply for the course which has this status, it will be "wait list"
        start_date:
          type: string
          format: yyyy-MM-dd HH:mm:ss.sss
          example: '2021-09-01 00:00:00.000'
          description: |
            The date when the course starts.
        end_date:
          type: string
          format: yyyy-MM-dd HH:mm:ss.sss
          example: '2021-09-16 00:00:00.000'
          description: |
            The date when the course ends.
        summary:
          type: string
          example: An introduction to the fundamentals of computer science and the art of programming
          description: |
            A summary of the course.
        description:
          type: string
          example: Learn the basics of programming and computer science through Python. This course aims to teach everyone the basics of programming. You will learn to create simple computer programs, develop problem-solving skills, and work through fun challenges. Once a student completes this course, they will be ready to take more advanced courses.
          description: |
            A description of the course.
        image_path:
          type: string
          example: https://dpcode.academy/courses/dpcs100.svg
          description: |
            An image path used for thumbnail.
        features:
          type: array
          example:
            [
              'A broad and robust understanding of computer science and programming.',
              'Explore fundamental programming concepts in Python',
              'How to think algorithmically and solve programming problems efficiently',
            ]
          items:
            type: string
          description: |
            A list of features of the course
        level:
          type: string
          example: Beginner
          description: |
            A level of the course<br>
            Acceptable values are:
            - Beginner
            - Intermediate
            - Advanced
        prerequisites:
          type: array
          example:
            ['DPCS101', 'Grade 11 or higher', 'Prior Programming Experience']
          items:
            type: string
          description: |
            Courses, conditions, premise, or status that are recommended for users to have before applying for the course.
        length:
          type: object
          properties:
            month:
              type: string
              example: '6'
            weeks:
              type: string
              example: '26'
            hours:
              type: string
              example: '3'
          description: |
            A course length. "month" and "weeks" are representing mostly same thing. "hours:" indicates hours per week. If "month" is 6, "weeks" is 26, and "hours" is 3, it can be translated into "26 Weeks (6 Months) - 3 hours per week".
        price:
          type: object
          properties:
            contents_only:
              type: string
              example: '100'
            online_course:
              type: string
              example: '200'
          description: |
            A total price costs for the course. CAD.
        available_schedules:
          type: array
          example:
            [
              'Tuesday 7pm - 8:30pm',
              'Thursday 7pm - 8:30pm',
              'Saturday 1pm - 4pm',
            ]
          items:
            type: string
          description: A list of available course schedules.
        classroom:
          type: string
          example: https://clasroom.google.com/c/sample
          description: |
            Google Classroom's link
        created_date:
          type: string
          format: yyyy-MM-dd HH:mm:ss.sss
          example: '2021-06-17 20:46:11.716'
          description: |
            Timestamp which this data was first created. Following to ISO 8601 format. yyyy-MM-dd hh:mm:ss.sss
        updated_date:
          type: string
          format: yyyy-MM-dd HH:mm:ss.sss
          example: '2021-06-18 15:22:05.292'
          description: |
            Timestamp which this data was last updated. Following to ISO 8601 format. yyyy-MM-dd hh:mm:ss.sss

    # Tak
    Status:
      type: object
      properties:
        user_id:
          type: string
          example: eyJz9sdfsdfsdfsd
          description: |
            Unique user ID which belongs to the course_id.
        course_id:
          type: string
          example: DPCS100-1
          description: |
            Unique course ID which belongs to the user_id.
        status:
          type: string
          example: registered
          description: |
            A user's status for the course (course_id).<br>
            There are four status: <br>
            - wait list
              - A user who applied but not in the process because the course is not ready (the course is "inactive").
            - applied
              - A user who already applied but hasn't registered (got interview or paid tuition fee) yet.
            - registered
              - A user who already registered (got interview and paid tuition free) to the course.
            - resigned
              - A user who quit the class for some reason.
        created_date:
          type: string
          format: yyyy-MM-dd HH:mm:ss.sss
          example: '2021-06-17 20:46:11.716'
          description: |
            Timestamp which this data was first created. Following to ISO 8601 format. yyyy-MM-dd hh:mm:ss.sss
        updated_date:
          type: string
          format: yyyy-MM-dd HH:mm:ss.sss
          example: '2021-06-18 15:22:05.292'
          description: |
            Timestamp which this data was last updated. Following to ISO 8601 format. yyyy-MM-dd hh:mm:ss.sss

    CognitoError:
      type: object
      properties:
        error:
          type: object
          description: error title
        error_description:
          type: string
          description: error detail

    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string
              example: Unexpected parameters received
            code:
              type: integer
              minimum: 100
              maximum: 600
              example: 190
