openapi: 3.0.0
info:
  version: 1.0.0
  title: DPCOde Academy API
  description: |
    DPCOde Academy API <br>
    Basically for optional column, it returns a blank instead of null if there is no value.

servers:
  - url: https://localhost:8000

security:
  - BasicAuth: []

paths:

  # Koji
  /oauth2/userInfo:
    get:
      tags:
        - cognito
      description: Get user info from social media.
      parameters:
        - $ref: "#/components/parameters/UserInfoFromSocialMedia"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Cognito"
              example:
                sub: '0be75991-gk2h-2334-184a-e224e28slffg'
                email_verified: 'false'
                phone_number_verified: 'false'
                given_name: 'Martin'
                family_name: 'Garrix'
                email: 'martin@mail.com'
                username: 'google_101304123810377524376'
        401:
          description: Unauthorized
          content:
            application/json:
                schema:
                  type: array
                  $ref: "#/components/schemas/CognitoError"
                example:
                  error: invalid_token
                  error_description: Access token is expired or user has globally signed out, disabled or been deleted.
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: array
                $ref: "#/components/schemas/CognitoError"
              example:
                error: invalid_request
                error_description: No authorization header set
  /users:
    get:
      tags:
        - users
      description: Get all students data.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"

        default:
          description: error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    # Daiki
    post:
      tags:
        - users
      summary: Create a new user with token id
      requestBody:
        description: | 
          Create a new user with token id. <br>
          id is required, but other values are optional
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                user_id:
                  type: "string"
                  description: |
                    <span style="color: red; ">*required</span> token id
                first_name:
                  type: "string"
                  description: |
                    \<Optional> User's first name
                last_name:
                  type: "string"
                  description: |
                    \<Optional> User's last name
                image_path:
                  type: string
                  description: |
                    \<Optional> The path of a user's profile image
                birth:
                  type: string
                  format: yyyy-MM-dd HH:mm:ss.sss
                  description:  |
                    \<Optional> User's birth day
                email:
                  type: string
                  format: email
                  description:  |
                    \<Optional> User's email
                phone:
                  type: string
                  description:  |
                    \<Optional> User's phone number
              example:
                user_id: 442c16a8a353
                first_name: Brooklyn
                last_name: Beckham
                image_path: "https://sampledata.png"
                birth: "1994-01-24 00:00:00"
                email: student1@gmail.com
                phone: 123-456-7890

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
                example:
                  user_id: 442c16a8a353
                  first_name: Brooklyn
                  last_name: Beckham
                  image_path: "https://sampledata.png"
                  birth: "1994-01-24 00:00:00.000"
                  email: student1@gmail.com
                  phone: 123-456-7890
                  parent_first_name": ""
                  parent_last_name": ""
                  parent_email: ""
                  parent_phone: ""
                  type: student
                  created_date: "2021-05-20 22:00:40.464"
                  updated_date: "2021-05-22 10:00:40.838"

        default:
          description: error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

#tak
  /users/detail:
    get:
      tags:
        - users
      description: Get a specific user data by the token.
      parameters:
        - $ref: "#/components/parameters/User-id"       
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # Tak
  /users/courses:
    get:
      tags:
        - users
      description: Get all course-ids that a user has.
      parameters:
        - $ref: "#/components/parameters/User-id"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    course_id:
                      type: string
                      description: "Unique course ID which belongs to the user_id."
                    status:
                      type: string
                      description: | 
                        A user's status for the course (course_id).
                        There are four status
                        - wait list
                          - A user who applied but not in the process because the course is not ready (the course is "inactive").
                        - applied
                          - A user who already applied but hasn't registered (got interview or paid tuition fee) yet.
                        - registered
                          - A user who already registered (got interview and paid tuition free) to the course.
                        - resign
                          - A user who quit the class for some reason.
                    created_date:
                      type: string
                      format: yyyy-MM-dd HH:mm:ss.sss
                      description: |
                        Timestamp which this data was first created. Following to ISO 8601 format. yyyy-MM-dd hh:mm:ss.sss
                    updated_date:
                      type: string
                      format: yyyy-MM-dd HH:mm:ss.sss
                      description: |
                        Timestamp which this data was first created. Following to ISO 8601 format. yyyy-MM-dd hh:mm:ss.sss
              example:
                - course_id: DPCS100#1
                  status: registered
                  created_date: "2021-05-20 22:00:40.464"
                  updated_date: "2021-05-22 10:00:40.838"
                - course_id: DPCS100#2
                  status: wait list
                  created_date: "2021-05-20 22:00:40.464"
                  updated_date: "2021-05-22 10:00:40.838"
                - course_id: DPCS101#1
                  status: resigned
                  created_date: "2021-05-20 22:00:40.464"
                  updated_date: "2021-05-22 10:00:40.838"

        default:
          description: error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # Tak
  /users/{course_id}/status:
    get:
      tags:
        - users
      description: Get the user's status for the course.
      parameters:
      - $ref: "#/components/parameters/User-id"   
      - $ref: "#/components/parameters/Course-id"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    description: | 
                      A user's status for the course (course_id).
                      There are four status
                      - wait list
                        - A user who applied but not in the process because the course is not ready (the course is "inactive").
                      - applied
                        - A user who already applied but hasn't registered (got interview or paid tuition fee) yet.
                      - registered
                        - A user who already registered (got interview and paid tuition free) to the course.
                      - resign
                        - A user who quit the class for some reason.
                  created_date:
                    type: string
                    format: yyyy-MM-dd HH:mm:ss.sss
                    description: |
                        Timestamp which this data was first created. Following to ISO 8601 format. yyyy-MM-dd hh:mm:ss.sss
                  updated_date:
                    type: string
                    format: yyyy-MM-dd HH:mm:ss.sss
                    description: |
                        Timestamp which this data was first created. Following to ISO 8601 format. yyyy-MM-dd hh:mm:ss.sss
              example:
                status: "registered"
                created_date: "2021-05-20 22:00:40.464"
                updated_date: "2021-05-21 23:01:40.464"

        default:
          description: error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # Tak
    put:
      tags:
        - users
      description: Update the user's status for the course.
      parameters:
      - $ref: "#/components/parameters/User-id"   
      - $ref: "#/components/parameters/Course-id"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                status:
                  type: string
                  description: |
                    <span style="color: red; ">*required</span> A user's status for the course (course_id).<br>
                    There are four status: <br>
                    - wait list
                      - A user who applied but not in the process because the course is not ready (the course is "inactive"). 
                    - applied
                      - A user who already applied but hasn't registered (got interview or paid tuition fee) yet.
                    - registered
                      - A user who already registered (got interview and paid tuition free) to the course. 
                    - resign
                      - A user who quit the class for some reason.
            example:
              status: registered
      responses:
        200:
          description: updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
        default:
          description: error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /courses:
  # Yasu
    get:
      tags:
        - courses
      description: Get all courses data.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Course"

  /courses/{course_id}:
    # Daiki
    get:
      tags:
        - courses
      description: Get specific courses data by its id.
      parameters:
      - $ref: "#/components/parameters/Course-id"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Course"
        default:
          description: error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    
    # Tak
    put:
      tags:
        - courses
      description: Update the status of the course by its id.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: registered
                  description: |
                    A user's status for the course (course_id).<br>
                    There are four status: <br>
                    - wait list
                      - A user who applied but not in the process because the course is not ready (the course is "inactive"). 
                    - applied
                      - A user who already applied but hasn't registered (got interview or paid tuition fee) yet.
                    - registered
                      - A user who already registered (got interview and paid tuition free) to the course. 
                    - resign
                      - A user who quit the class for some reason.
            example:
              status: active
      responses:
        200:
          description: updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Course"
        default:
          description: error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  
  #Tak
  /courses/{course_id}/users:
    get:
      tags:
        - courses
      description: Get all user-ids that a course has.
      parameters:
      - $ref: "#/components/parameters/Course-id"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Status"
              example:
                - user_id: 442c16a8a353
                  status: registered
                  created_date: "2021-05-20 22:00:40.464"
                  updated_date: "2021-05-22 10:00:40.838"
                - user_id: ffaaafecc0e9
                  status: wait list
                  created_date: "2021-05-20 22:00:40.464"
                  updated_date: "2021-05-22 10:00:40.838"
                - user_id: d55c4d00a85e
                  status: applied
                  created_date: "2021-05-20 22:00:40.464"
                  updated_date: "2021-05-22 10:00:40.838"

        default:
          description: error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # Daiki
    post:
      tags:
        - courses
      description: Add a user to a course
      parameters:
      - $ref: "#/components/parameters/User-id"
      - $ref: "#/components/parameters/Course-id"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                user_status:
                  type: string
                  description: |
                    <span style="color: red; ">*required</span> A user's status for the course (course_id).<br>
                    There are four status: <br>
                    - wait list
                      - A user who applied but not in the process because the course is not ready (the course is "inactive"). 
                    - applied
                      - A user who already applied but hasn't registered (got interview or paid tuition fee) yet.
                    - registered
                      - A user who already registered (got interview and paid tuition free) to the course. 
                    - resign
                      - A user who quit the class for some reason.
              example:
                  user_status: registered

      responses:
        200:
          description: created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"

  /send-email:
  # Daiki
    post:
      tags:
        - email
      description: Send email to admin
      requestBody:
        content:
          application/json:
            schema:
              properties:
                course_id:
                  type: string
                  description: |
                    <span style="color: red; ">*required</span> Unique course ID.
                first_name:
                  type: string
                  description: |
                    <span style="color: red; ">*required</span> User's first name
                last_name:
                  type: string
                  description: |
                    <span style="color: red; ">*required</span> User's last name
                email:
                  type: string
                  format: email
                  description:  |
                    <span style="color: red; ">*required</span> User's email
                phone:
                  type: string
                  description:  |
                    <span style="color: red; ">*required</span> User's phone number
              example:
                  course_id: DPCS100#1
                  first_name: Brooklyn
                  last_name: Beckham
                  email: student1@gmail.com
                  phone: 123-456-7890

      responses:
        200:
          description: created
          content:
            application/json:
              schema:
                properties:
                  course_id:
                    type: string
                    description: |
                      <span style="color: red; ">*required</span> Unique course ID.
                  first_name:
                    type: string
                    description: |
                      <span style="color: red; ">*required</span> User's first name
                  last_name:
                    type: string
                    description: |
                      <span style="color: red; ">*required</span> User's last name
                  email:
                    type: string
                    format: email
                    description:  |
                      <span style="color: red; ">*required</span> User's email
                  phone:
                    type: string
                    description:  |
                      <span style="color: red; ">*required</span> User's phone number
                example:
                    course_id: DPCS100#1
                    first_name: Brooklyn
                    last_name: Beckham
                    email: student1@gmail.com
                    phone: 123-456-7890

components:
  parameters:
    # Koji
    UserInfoFromSocialMedia:
        name: Authorization
        in: header
        description: identify user by access token
        required: true
        example: Beaer ACCESS_TOKEN
        schema:
          type: string
    PageLimit:
      name: limit
      in: query
      description: Limits the number
      schema:
        type: integer
    User-id:
        name: user_id
        in: header
        example: eyJz9sdfsdfsdfsd
        description: User ID (token id)
        required: true
        schema:
          type: string
    Course-id:
        name: course_id
        in: path
        example: DPCS100#1
        description: Course ID
        required: true
        schema:
          type: string

  schemas:
  # Koji
    Cognito:
      type: object
      properties:
        sub:
          type: string
          description: |
            users id in cognito
        username:
          type: string
          description: |
            users username in cognito
        email_verified:
          type: boolean
          description: |
            whether if email is verified
        phone_number_verified:
          type: boolean
          description: |
            \<Optional> whether if phone number is verified
        given_name:
          type: string
          description: |
            \<Optional> user's given name
        family_name:
          type: string
          description: |
            \<Optional> user's family name
        email:
          type: string
          description: |
            \<Optional> user's email
    # Daiki
    User:
      type: object
      properties:
        user_id:
          type: string
          example: 442c16a8a353
          description: |
            User's social account unique token id
        first_name:
          type: string
          example: Brooklyn
          description: |
            User's first name
        last_name:
          type: string
          example: Beckham
          description: |
            User's last name
        image_path:
          type: string
          example: "https://sampledata.png"
          description: |
            The path of a user's profile image
        birth:
          type: string
          format: yyyy-MM-dd HH:mm:ss.sss
          example: "1994-01-24 00:00:00.000"
          description: |
            User's birth day
        email:
          type: string
          format: email
          example: student1@gmail.com
          description: |
            User's email
        phone:
          type: string
          example: 123-456-7890
          description: |
            User's phone number
        parent_first_name:
          type: string
          example: David
          description: |
            Optional<br>
            User's parents first name
        parent_last_name:
          type: string
          example: Beckham
          description: |
            Optional<br>
            User's parents last name
        parent_email:
          type: string
          format: email
          example: parent1@gmail.com
          description: |
            Optional<br>
            User's parents email
        parent_phone:
          type: string
          example: 456-789-0123
          description: |
            Optional<br>
            User's parents phone number
        type:
          type: string
          example: student
          description: |
            User's type<br>
            Acceptable values are:
            - student
            - admin
        created_date:
          type: string
          format: yyyy-MM-dd HH:mm:ss.sss
          example: "2021-05-20 22:00:40.464"
          description: |
            Timestamp which this data was first created. Following to ISO 8601 format. yyyy-MM-dd hh:mm:ss.sss
        updated_date:
          type: string
          format: yyyy-MM-dd HH:mm:ss.sss
          example: "2021-05-22 10:00:40.838"
          description: |
            Timestamp which this data was first created. Following to ISO 8601 format. yyyy-MM-dd hh:mm:ss.sss

  # Tak
    Course:
      type: object
      properties:
        course_id:
          type: string
          example: DPCS100#001
          description: |
            Unique course ID. First word until # indicates the course prime id. The second word (after #) indicates seasons. For example, if a course has three times in a year, it will be like,
            - Jan - Apr
              - DPCS100#1
            - May - Aug
              - DPCS100#2
            - Sep - Dec
              - DPCS100#3
        name:
          type: string
          example: ADVANCED COMPETITIVE PROGRAMMING
          description: |
            Course name.
        category:
          type: string
          example: cs
          description: |
            Course category. <br>
            Acceptable values are:
            - cs
            - mobile
            - web
            - math
        status:
          type: string
          example: active
          description: |
            Course status<br>
            Acceptable values are:
            - archived
              - A course which has already finished
            - active
              - A course which is now on going
            - inactive
              - A course which is will be "active" in the future. If an user apply for the course which has this status, it will be "wait list"
        start_date:
          type: string
          format: yyyy-MM-dd HH:mm:ss.sss
          example: "2021-09-01 00:00:00.000"
          description: |
            The date when the course starts.
        end_date:
          type: string
          format: yyyy-MM-dd HH:mm:ss.sss
          example: "2021-09-16 00:00:00.000"
          description: |
            The date when the course ends.
        class_schedules:
          type: array
          items:
            properties:
              start_time:
                type: string
                format: yyyy-MM-dd HH:mm:ss.sss
                example: "2021-09-01 16:00.000"
              end_time:
                type: string
                format: yyyy-MM-dd HH:mm:ss.sss
                example: "2021-09-01 18:00.000"
          description: |
            A list of class schedules including a start date and an end date of the class.
        summary:
          type: string
          example: An introduction to the fundamentals of computer science and the art of programming
          description: |
            A summary of the course.
        description:
          type: string
          example: Learn the basics of programming and computer science through Python. This course aims to teach everyone the basics of programming. You will learn to create simple computer programs, develop problem-solving skills, and work through fun challenges. Once a student completes this course, they will be ready to take more advanced courses.
          description: |
            A description of the course.
        image_path:
          type: string
          example: https://dpcode.academy/courses/dpcs100.svg
          description: |
            An image path used for thumbnail.
        features:
          type: array
          example: ["A broad and robust understanding of computer science and programming.", "Explore fundamental programming concepts in Python", "How to think algorithmically and solve programming problems efficiently"]
          items:
            type: string
          description: |
            A list of features of the course
        level:
          type: string
          example: Beginner
          description: |
            A level of the course<br>
            Acceptable values are:
            - Beginner
            - Intermediate
            - Advanced
        prerequisites:
          type: array
          example: [ "DPCS101", "Grade 11 or higher","Prior Programming Experience"]
          items:
            type: string
          description: |
            Courses, conditions, premise, or status that are recommended for users to have before applying for the course.
        length:
          type: object
          properties:
            month:
              type: string
              example: "6"
            weeks:
              type: string
              example: "26"
            hours:
              type: string
              example: "3"
          description: |
            A course length. "month" and "weeks" are representing mostly same thing. "hours:" indicates hours per week. If "month" is 6, "weeks" is 26, and "hours" is 3, it can be translated into "26 Weeks (6 Months) - 3 hours per week".
        price:
          type: string
          example: "100000"
          description: |
            A total price costs for the course. CAD.
        available_schedules:
          type: array
          example: [ "Tuesday 7pm - 8:30pm", "Thursday 7pm - 8:30pm", "Saturday 1pm - 4pm"]
          items:
            type: string
          description:
            A list of available course schedules.
        created_date:
          type: string
          format: yyyy-MM-dd HH:mm:ss.sss
          example: "2021-06-17 20:46:11.716"
          description: |
            Timestamp which this data was first created. Following to ISO 8601 format. yyyy-MM-dd hh:mm:ss.sss
        updated_date:
          type: string
          format: yyyy-MM-dd HH:mm:ss.sss
          example: "2021-06-18 15:22:05.292"
          description: |
            Timestamp which this data was last updated. Following to ISO 8601 format. yyyy-MM-dd hh:mm:ss.sss

  # Tak
    Status:
      type: object
      properties:
        user_id:
          type: string
          example: eyJz9sdfsdfsdfsd
          description: |
            Unique user ID which belongs to the course_id.
        course_id:
          type: string
          example: DPCS100#1
          description: |
            Unique course ID which belongs to the user_id. 
        status:
          type: string
          example: registered
          description: |
            A user's status for the course (course_id).<br>
            There are four status: <br>
            - wait list
              - A user who applied but not in the process because the course is not ready (the course is "inactive"). 
            - applied
              - A user who already applied but hasn't registered (got interview or paid tuition fee) yet.
            - registered
              - A user who already registered (got interview and paid tuition free) to the course. 
            - resign
              - A user who quit the class for some reason.
        created_date:
          type: string
          format: yyyy-MM-dd HH:mm:ss.sss
          example: "2021-06-17 20:46:11.716"
          description: |
            Timestamp which this data was first created. Following to ISO 8601 format. yyyy-MM-dd hh:mm:ss.sss
        updated_date:
          type: string
          format: yyyy-MM-dd HH:mm:ss.sss
          example: "2021-06-18 15:22:05.292"
          description: |
            Timestamp which this data was last updated. Following to ISO 8601 format. yyyy-MM-dd hh:mm:ss.sss

    CognitoError:
      type: object
      properties:
        error:
          type: object
          description: error title
        error_description:
          type: string
          description: error detail    

    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string
              example: Unexpected parameters received
            code:
              type: integer
              minimum: 100
              maximum: 600
              example: 190
