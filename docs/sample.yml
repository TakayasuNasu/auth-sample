openapi: 3.0.0
info:
  version: 1.0.0
  title: DPCOde Academy API
  description: |
    DPCOde Academy API <br>
    Basically for optional column, it returns a blank instead of null if there is no value.

servers:
  - url: https://localhost:8000

security:
  - BasicAuth: []

paths:
  /user:
    get:
      tags:
        - user
      description: Get all students data.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"

        default:
          description: error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /user/{token}:
    get:
      tags:
        - user
      description: Get specific student data by token.
      parameters:
        - $ref: "#/components/parameters/PageLimit"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              example:
                id: 1
                name: David Beckham
                birth: 2000/12/12
                email: student1@gmail.com
                phone: 1231231233
                address: Vancouver
        default:
          description: error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /students/{token}/courses:
    get:
      tags:
        - user
      description: Get courses of specific student has.
      parameters:
        - $ref: "#/components/parameters/PageLimit"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Course"
                example:
                  - id: 1
                    name: Python
                    duration: duration
                    schedules:
                      - 2021/05/10
                      - 2021/05/11
                      - 2021/05/12
                    description: Python for beginners.
                    image_path: /img/courses/card.jpg
                    features:
                      - 1
                      - 2
                      - 3
                    level: Beginner
                    prerequisites:
                      - 1
                      - 2
                    price: 2000
                    status: normal
                  - id: 2
                    name: Algorithm
                    duration: duration
                    schedules:
                      - 2021/05/13
                      - 2021/05/14
                      - 2021/05/15
                    description: Algorithm for intermediates.
                    image_path: /img/courses/card.jpg
                    features:
                      - 1
                    level: Intermediate
                    prerequisites:
                      - 1
                      - 3
                      - 5
                    price: 3500
                    status: hard
        default:
          description: error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # Tak
  /user/{token}/course:
    get:
      tags:
        - user
      description: Get all course-ids that a user has.
      parameters:
        - $ref: "#/components/parameters/PageLimit"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
                type: array  
              example:
                - course_id: DPCS100#1
                  status: registered
                - course_id: DPCS100#2
                  status: wait list
                - course_id: DPCS101#1
                  status: resigned
                

        default:
          description: error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # Tak
  /user/{token}/course/{id}:
    get:
      tags:
        - status
      description: Get the user's status for the course.
      parameters:
        - $ref: "#/components/parameters/PageLimit"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
              example:
                status: registered

        default:
          description: error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # Tak
    put:
      tags:
        - status
      description: Update the user's status for the course.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Status"
            example:
              status: registered
      responses:
        200:
          description: updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
        default:
          description: error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /courses:
    get:
      tags:
        - courses
      description: Get all courses data.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Course"
                example:
                  - id: 1
                    name: Python
                    duration: duration
                    schedules:
                      - 2021/05/10
                      - 2021/05/11
                      - 2021/05/12
                    description: Python for beginners.
                    image_path: /img/courses/card.jpg
                    features:
                      - 1
                      - 2
                      - 3
                    level: Beginner
                    prerequisites:
                      - 1
                      - 2
                    price: 2000
                    status: normal
                  - id: 2
                    name: Algorithm
                    duration: duration
                    schedules:
                      - 2021/05/13
                      - 2021/05/14
                      - 2021/05/15
                    description: Algorithm for intermediates.
                    image_path: /img/courses/card.jpg
                    features:
                      - 1
                    level: Intermediate
                    prerequisites:
                      - 1
                      - 3
                      - 5
                    price: 3500
                    status: hard
    post:
      tags:
        - courses
      description: Create a new Course.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Course"
            example:
              name: Java
              schedules:
                - 2021/05/15
                - 2021/05/16
              description: Java fro beginners.
              image_path: /img/courses/card.jpg
              price: 2799
              status: hard
      responses:
        200:
          description: created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Course"

  /courses/{id}:
    get:
      tags:
        - courses
      description: Get specific courses data by id.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Course"
        default:
          description: error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    
    # Tak
    put:
      tags:
        - courses
      description: Update the status of the course by its id.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Course"
            example:
              id: DPCS100#1
              status: active
      responses:
        200:
          description: updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Course"
        default:
          description: error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      tags:
        - courses
      description: Delete specific course data by id.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Course"
            example:
              id: 2
      responses:
        200:
          description: deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
              example:
                id: 2
        default:
          description: error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  
  #Tak
  /courses/{id}/user:
    get:
      tags:
        - courses
      description: Get all user-ids that a course has by the course id.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
                type: array  
              example:
                - course_id: 442c16a8a353
                  status: registered
                - course_id: ffaaafecc0e9
                  status: wait list
                - course_id: d55c4d00a85e
                  status: applied


        default:
          description: error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"


components:
  parameters:
    PageLimit:
      name: limit
      in: query
      description: Limits the number
      schema:
        type: integer

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: 442c16a8a353
          description: |
            User's social account unique token id
        first_name:
          type: string
          example: Brooklyn
          description: |
            User's first name
        last_name:
          type: string
          example: Beckham
          description: |
            User's last name
        image_path:
          type: string
          example: "https://sampledata.png"
          description: |
            The path of a user's profile image
        birth:
          type: string
          format: yyyy-MM-dd HH:mm:ss.sss
          example: "1994-01-24 00:00:00.000"
          description: |
            User's birth day
        email:
          type: string
          format: email
          example: student1@gmail.com
          description: |
            User's email
        phone:
          type: string
          example: 123-456-7890
          description: |
            User's phone number
        parent_first_name:
          type: string
          example: David
          description: |
            Optional<br>
            User's parents first name
        parent_last_name:
          type: string
          example: Beckham
          description: |
            Optional<br>
            User's parents last name
        parent_email:
          type: string
          format: email
          example: parent1@gmail.com
          description: |
            Optional<br>
            User's parents email
        parent_phone:
          type: string
          example: 456-789-0123
          description: |
            Optional<br>
            User's parents phone number
        type:
          type: string
          example: student
          description: |
            User's type<br>
            Acceptable values are:
            - student
            - admin
        updated_date:
          type: string
          format: yyyy-MM-dd HH:mm:ss.sss
          example: "2021-05-22 10:00:40.838"
          description: |
            updated date
        created_date:
          type: string
          format: yyyy-MM-dd HH:mm:ss.sss
          example: "2021-05-20 22:00:40.464"
          description: |
            created date

  # Tak
    Course:
      type: object
      properties:
        id:
          type: string
          example: DPCS100#001
          description: |
            Unique course ID. First word until # indicates the course prime id. The second word (after #) indicates seasons. For example, if a course has three times in a year, it will be like,
            - Jan - Apr
              - DPCS100#1
            - May - Aug
              - DPCS100#2
            - Sep - Dec
              - DPCS100#3
        name:
          type: string
          example: ADVANCED COMPETITIVE PROGRAMMING
          description: |
            Course name.
        category:
          type: string
          example: cs
          description: |
            Course category. <br>
            Acceptable values are:
            - cs
            - mobile
            - web
            - math
        status:
          type: string
          example: active
          description: |
            Course status<br>
            Acceptable values are:
            - archived
              - A course which has already finished
            - active
              - A course which is now on going
            - inactive
              - A course which is will be "active" in the future. If an user apply for the course which has this status, it will be "wait list"
        start_date:
          type: string
          format: yyyy/MM/dd HH:mm:ss.sss
          example: "2021-09-01 00:00:00.000"
          description: |
            The date when the course starts.
        end_date:
          type: string
          format: yyyy/MM/dd HH:mm:ss.sss
          example: "2021-09-16 00:00:00.000"
          description: |
            The date when the course ends.
        class_schedules:
          type: array
          items:
            properties:
              start_time:
                type: string
                format: yyyy/MM/dd HH:mm:ss.sss
                example: "2021-09-01 16:00.000"
              end_time:
                type: string
                format: yyyy/MM/dd HH:mm:ss.sss
                example: "2021-09-01 18:00.000"
          description: |
            A list of class schedules including a start date and an end date of the class.
        description:
          type: string
          example: Learn the basics of programming and computer science through Python. This course aims to teach everyone the basics of programming. You will learn to create simple computer programs, develop problem-solving skills, and work through fun challenges. Once a student completes this course, they will be ready to take more advanced courses.
          description: |
            A description of the course.
        image_path:
          type: string
          example: https://dpcode.academy/courses/dpcs100.svg
          description: |
            An image path used for thumbnail.
        features:
          type: array
          example: ["A broad and robust understanding of computer science and programming.", "Explore fundamental programming concepts in Python", "How to think algorithmically and solve programming problems efficiently"]
          items:
            type: string
          description: |
            A list of features of the course
        level:
          type: string
          example: Beginner
          description: |
            A level of the course<br>
            Acceptable values are:
            - Beginner
            - Intermediate
            - Advanced
        prerequisites:
          type: array
          example: [ "DPCS101", "Grade 11 or higher","Prior Programming Experience"]
          items:
            type: string
          description: |
            Courses, conditions, premise, or status that are recommended for users to have before applying for the course.
        length:
          type: object
          properties:
            month:
              type: number
              example: 6
            weeks:
              type: number
              example: 26
            hours:
              type: number
              example: 3
          description: |
            A course length. "month" and "weeks" are representing mostly same thing. "hours:" indicates hours per week. If "month" is 6, "weeks" is 26, and "hours" is 3, it can be translated into "26 Weeks (6 Months) - 3 hours per week".
        price:
          type: number
          example: 100000
          description: |
            A total price costs for the course. CAD.
        available_schedules:
          type: array
          example: [ "Tuesday 7pm - 8:30pm", "Thursday 7pm - 8:30pm", "Saturday 1pm - 4pm"]
          items:
            type: string
          description:
            A list of available course schedules.
        created_date:
          type: string
          format: yyyy/MM/dd HH:mm:ss.sss
          example: "2021-06-17 20:46:11.716"
          description: |
            Timestamp which this data was first created. Following to ISO 8601 format. yyyy/MM/dd hh:mm:ss
        updated_date:
          type: string
          format: yyyy/MM/dd HH:mm:ss.sss
          example: "2021-06-18 15:22:05.292"
          description: |
            Timestamp which this data was last updated. Following to ISO 8601 format. yyyy/MM/dd hh:mm:ss

  # Tak
    Status:
      type: object
      properties:
        user_id:
          type: string
          example: eyJz9sdfsdfsdfsd
          description: |
            Unique user ID which belongs to the course_id.
        course_id:
          type: string
          example: DPCS100#1
          description: |
            Unique course ID which belongs to the user_id. 
        status:
          type: string
          example: registered
          description: |
            A user's status for the course (course_id).<br>
            There are four status: <br>
            - wait list
              - A user who applied but not in the process because the course is not ready (the course is "inactive"). 
            - applied
              - A user who already applied but hasn't registered (got interview or paid tuition fee) yet.
            - registered
              - A user who already registered (got interview and paid tuition free) to the course. 
            - resign
              - A user who quit the class for some reason.


    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string
              example: Unexpected parameters received
            code:
              type: integer
              minimum: 100
              maximum: 600
              example: 190
